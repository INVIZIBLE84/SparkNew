
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check user role
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    function isOneOfRoles(roles) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return userRole in roles;
    }

    // Users collection (assuming you store user roles here)
    match /users/{userId} {
      allow read: if request.auth != null; // Authenticated users can read profiles (adjust as needed)
      allow write: if request.auth.uid == userId || isRole('admin'); // Users can update their own profile, admins can update any
    }

    // Attendance Sessions: Created by faculty/admin
    match /attendance_sessions/{sessionId} {
      allow read: if request.auth != null; // Students need to read session_id and generated_codes
      allow create: if request.auth != null && isOneOfRoles(['faculty', 'admin']); // Only faculty/admin can start sessions
      allow update, delete: if request.auth != null && (isOneOfRoles(['admin']) || resource.data.created_by == request.auth.uid) ; // Admin or creator can manage
      // Ensure required fields on create
      allow create: if request.resource.data.keys().hasAll(['class_code', 'generated_codes', 'correct_code', 'start_time', 'end_time', 'created_by'])
                      && request.resource.data.class_code is string
                      && request.resource.data.generated_codes is list && request.resource.data.generated_codes.size() == 3
                      && request.resource.data.correct_code is string
                      && request.resource.data.start_time == request.time // Ensure server timestamp is used for start_time
                      && request.resource.data.end_time is timestamp
                      && request.resource.data.created_by == request.auth.uid;
    }

    // Attendance Records: Created by students
    match /attendance/{attendanceId} {
      allow read: if request.auth != null && (resource.data.student_id == request.auth.uid || isOneOfRoles(['faculty', 'admin'])); // Students see their own, faculty/admin see all
      allow create: if request.auth != null // Only authenticated users can submit
                    // Validate data consistency and integrity
                    && request.resource.data.student_id == request.auth.uid // Student can only submit for themselves
                    && request.resource.data.keys().hasAll(['student_id', 'session_id', 'class_code', 'selected_code', 'status', 'timestamp'])
                    && request.resource.data.session_id is string
                    && request.resource.data.class_code is string
                    && request.resource.data.selected_code is string && request.resource.data.selected_code.size() == 2
                    && (request.resource.data.status == 'present' || request.resource.data.status == 'invalid')
                    && request.resource.data.timestamp == request.time; // Server timestamp
      allow update: if false; // Records should be immutable once created
      allow delete: if request.auth != null && isRole('admin'); // Only admins can delete records
    }
  }
}

    